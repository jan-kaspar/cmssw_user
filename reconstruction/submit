#!/bin/bash

# note about directory naming
# * work_dir: where cfg, job, log, ... files are stored for a give job, typically
#     /afs/.../work_dir/<input_tag>
# * work_dir_base: common base for work_dir's, typically
#     work_dir/
# * work_dir_base_full: work_dir_base with absolute path prefix
#     /afs/.../work_dir
# * job_dir: where job is executed (on remote host), typically
#     /pool/...
# * exec_dir: where cmsRun is executed, typically
#     /pool/.../<input_tag>/

#----------------------------------------------------------------------------------------------------

function PrintUsage()
{
	echo "USAGE: submit <options> [config]"
	echo "OPTIONS:"
	echo "    -submit       really submit jobs"
	echo "    -test         make files but do not submit jobs"
	echo "    -maxtime <v>  set max time to <v> seconds"
}

#----------------------------------------------------------------------------------------------------

function CheckVariableDefined()
{
	local varName="$1"
	if [ -z "${!varName+x}" ]
	then
		local idx
		let idx=${#BASH_SOURCE[@]}-2
		local scriptName="${BASH_SOURCE[$idx]}"
		echo "ERROR in $scriptName: variable '$varName' not defined"
		exit 1
	fi
}

#----------------------------------------------------------------------------------------------------

# default values

cwd=`pwd -P`
work_dir_base="work_dir"
work_dir_base_full="$cwd/work_dir"

template_file=""
check_template_file="CheckRootFile_template"

config_file="cfg.py"
log_file="log"
check_file="CheckRootFile.cc"

submitted_file="submitted"
finished_file="finished"
success_file="success"

condor_file="$cwd/$work_dir_base/condor.sub"

test_only="y"

max_time="7200" # s

input_config=""

#----------------------------------------------------------------------------------------------------
# parse command line

while [ -n "$1" ]
do
	case "$1" in
		"-h" | "--help")
			PrintUsage
			exit 0
			;;

		"-test")
			test_only="y"
			;;

		"-submit")
			test_only="n"
			;;

		"-maxtime")
			shift
			max_time="$1"
			;;

		-*)
			echo "ERROR: unknown option '$1'."
			PrintUsage
			exit 1
			;;

		*)
			if [ -n "$input_config" ]
			then
				echo "ERROR: only one config can be used at at time."
				exit 1
			fi
			input_config="$1"
			;;

	esac

	shift
done

#----------------------------------------------------------------------------------------------------
# source config

if [ ! -f "$input_config" ]
then
	echo "ERROR: can't read config file '$input_config'."
	PrintUsage
	exit 1
fi

source "$input_config"

#----------------------------------------------------------------------------------------------------

CheckVariableDefined "input_blocks"
CheckVariableDefined "input_block_labels"
CheckVariableDefined "input_block_runs"
CheckVariableDefined "input_block_ls_selections"
CheckVariableDefined "input_block_output_tags"
CheckVariableDefined "input_block_lv1Bits"
CheckVariableDefined "input_block_geometries"
CheckVariableDefined "input_block_alignment_files"
CheckVariableDefined "input_block_template_files"
CheckVariableDefined "input_block_output_dirs"

#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------

function MakeConfig()
{
	(
		echo "#!/bin/sh"
		echo "export HOME=\"/afs/cern.ch/exp/totem/scratch/jkaspar\""
		echo ""
		echo "work_dir=\"$work_dir_base_full/$input_tag\""
		echo ""
		echo "date > \"\$work_dir/$submitted_file\""
		echo ""
		echo "job_dir=\`pwd -P\`"
		echo "echo \"job_dir=\$job_dir\""
		echo ""
		echo "source \"/cvmfs/cms.cern.ch/cmsset_default.sh\""
		echo "cd \"$CMSSW_BASE\""
		echo "cmsenv"
		echo ""
		echo "export CMSSW_SEARCH_PATH=\"\$CMSSW_SEARCH_PATH:/afs/cern.ch/work/j/jkaspar/software/ctpps/user/data\""
		echo "export CMSSW_DATA_PATH=\"/afs/cern.ch/work/j/jkaspar\""
		echo ""
		echo "# grid proxy configuration"
		echo "export X509_USER_PROXY=\"/afs/cern.ch/user/j/jkaspar/x509up_u2177\""
		echo ""
		echo "voms-proxy-info"
		echo ""
		cat "common_job_code"
		echo ""
		echo "exec_dir=\"\$job_dir/$input_tag\"" # TODO
		echo "mkdir -p \"\$exec_dir\""
		echo "cd \"\$exec_dir\""
		echo ""
		echo "# run CMSSW"
		echo "("
		echo "    echo \"--------------------\""
		echo "    echo \"CMSSW version: \$CMSSW_VERSION\""
		echo "    echo \"CMSSW installation: \$CMSSW_BASE\""
		echo "    echo start: \`date\`"
		echo "    echo \"--------------------\""
		echo "    cmsRun \"\$work_dir/$config_file\""
		echo "    rc=\$?"
		echo "    echo \"--------------------\""
		echo "    echo end: \`date\`"
		echo "    exit \$rc"
		echo ") &> \"\$work_dir/$log_file\""
		echo "rc=\$?"
		echo "if [ "\$rc" -ne 0 ]"
		echo "then"
		echo "    echo \"cmsRun crashed: return code = \$rc\""
		echo "    date > \"\$work_dir/$finished_file\""
		echo "    exit 1"
		echo "fi"
		echo ""
		echo "# check ROOT file consistency"
		echo "root -b -q -l \"\$work_dir/$check_file\" 2> /dev/null"
		echo "if [ \$? -eq 0 ]"
		echo "then"
		echo "    # workaround for problems with eos cp"
		echo "    export LD_LIBRARY_PATH=\"\""
		echo "    "
		echo "    success=1"
		echo "    outputDir=\"$output_dir\""
		echo "    RemoteMkdir \"\$outputDir\""
		echo "    SafeCmd RemoteCopy \"\$work_dir/$config_file\" \"\$outputDir/${output_tag}_cfg.py\" || success=0"
		echo "    SafeCmd RemoteCopy \"\$work_dir/$log_file\" \"\$outputDir/${output_tag}.log\" || success=0"
		echo "    SafeCmd RemoteCopy \"$output_file\" \"\$outputDir/${output_tag}.root\" || success=0"
		echo "    if [ \$success -eq 1 ]"
		echo "    then"
		echo "        date > \"\$work_dir/$success_file\""
		echo "    fi"
		echo "else"
		echo "    echo \"The reco file is corrupted, you will need to rerun this job.\""
		echo "fi"
		echo ""
		echo "date > \"\$work_dir/$finished_file\""
	) > "$work_dir_base/$dir/job"

	chmod u+x "$work_dir_base/$dir/job"
}

#----------------------------------------------------------------------------------------------------

function MakeScript()
{
	cat "$template_file" | sed -e "\
			s|\$run|$run|g;\
			s|\$ls_selection|$ls_selection|g;\
			s|\$input_files|$input_files|;\
			s|\$mapping|$mapping|g;\
			s|\$geometry|$geometry|g;\
			s|\$alignment_files|$alignment_files|g;\
			s|\$ntuple_file|ntuple.root|;\
			s|\$output_file|$output_file|;\
			s|\$lv1Bits|$lv1Bits|;\
		" > "$work_dir_base/$dir/$config_file"
}

#----------------------------------------------------------------------------------------------------

function MakeCheckScript()
{
	cat "$check_template_file" | sed "\
			s|\$file|$output_file|;\
		" > "$work_dir_base/$dir/$check_file"
}

#----------------------------------------------------------------------------------------------------

function Submit()
{
	(
		echo ""
		echo "dir=$dir"
		echo "queue"
	) >> "$condor_file"
}

#----------------------------------------------------------------------------------------------------

function InitCondorScript()
{
	(
		echo "executable = $work_dir_base_full/\$(dir)/job"
		echo "arguments = \$(ClusterId) \$(ProcId) \\\"\$(dir)\\\""
		echo "output = $work_dir_base_full/\$(dir)/out"
		echo "error = $work_dir_base_full/\$(dir)/err"
		echo "log = $work_dir_base_full/condor.log"

		echo "+MaxRuntime = $max_time"

		#echo "+JobBatchName = \"$job_name\""

		#echo "requirements = (OpSysAndVer =?= \"SLCern6\")"

	) > "$condor_file"
}

#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------

InitCondorScript

# process input
for idx in ${!input_blocks[*]} 
do
	# determine input tag
	input_tag="${input_block_labels[$idx]}"

	echo "* $input_tag"

	# collect files
	input_files=""
	for file in ${input_blocks[$idx]}
	do
		if [ -n "$input_files" ]
		then
			input_files="${input_files},\n"
		fi

		input_files="${input_files}\t\t\"$file\""
	done

	# set per-block variables
	run="${input_block_runs[$idx]}"
	ls_selection="${input_block_ls_selections[$idx]}"
	lv1Bits="${input_block_lv1Bits[$idx]}"
	geometry="${input_block_geometries[$idx]}"
	alignment_files="${input_block_alignment_files[$idx]}"
	template_file="${input_block_template_files[$idx]}"
	output_dir="${input_block_output_dirs[$idx]}"

	# make work directory
	dir="$input_tag"
	mkdir -p "$work_dir_base/$dir"

	# define output
	output_tag="${input_block_output_tags[$idx]}"
	output_file="output.root"
	
	# make config
	MakeConfig

	# make job script
	MakeScript

	# make check script
	MakeCheckScript

	# add entry to submission script
	Submit
done

# do submission
if [ "$test_only" == "y" ]
then
	echo "In order to submit, run:"
	echo "    condor_submit \"$condor_file\""
else
	echo "Submitting ..."
	condor_submit "$condor_file"
fi

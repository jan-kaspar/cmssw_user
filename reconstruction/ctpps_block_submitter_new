#!/bin/bash

#----------------------------------------------------------------------------------------------------

# defaults
input_blocks=()
input_block_labels=()
input_block_runs=()
input_block_ls_selections=()
input_block_output_tags=()
input_block_lv1Bits=()
input_block_geometries=()
input_block_alignment_files=()
input_block_template_files=()
input_block_output_dirs=()

#----------------------------------------------------------------------------------------------------

function FlushBlock()
{
	input_blocks+=("$buffer")
	input_block_labels+=("${task_prefix}/$run/$block_idx")
	input_block_runs+=("$run")
	input_block_ls_selections+=("$ls_sel")
	input_block_output_tags+=("run_${run}.${block_idx}${task_suffix}")
	input_block_lv1Bits+=("$lv1Bits")
	input_block_geometries+=("$geometry")
	input_block_alignment_files+=("$alignment_files")
	input_block_template_files+=("$template_file")
	input_block_output_dirs+=("$output_dir")

	buffer=""
	let buffer_size=0
	let block_idx+=1
}

#----------------------------------------------------------------------------------------------------

function ParseLSList()
{
	ls_sel=""

	while [ 1 ]
	do
		bit=${ls_spec%%,*}
		rest=${ls_spec#*,}

		ls_beg=${bit%-*}
		ls_end=${bit#*-}

		if [ -n "$ls_sel" ]
		then
			ls_sel="$ls_sel, "
		fi

		ls_sel="$ls_sel\"$run:$ls_beg-$run:$ls_end\""

		if [ "$rest" == "$ls_spec" ]
		then
			break
		fi

		ls_spec="$rest"
	done
}

#----------------------------------------------------------------------------------------------------

function SubmitBlocks()
{
	# check input
	CheckVariableDefined "runs"
	CheckVariableDefined "task_prefix"
	CheckVariableDefined "task_suffix"
	CheckVariableDefined "files_per_block"
	CheckVariableDefined "geometry"
	CheckVariableDefined "alignment_files"
	CheckVariableDefined "template_file"
	CheckVariableDefined "output_dir"

	# process input
	for run_ls in ${runs[*]}
	do
		# extract run number and list of lumisections
		run=${run_ls%.*}
		ls_spec=${run_ls#*.}
		if [ "$ls_spec" == "$run" ]
		then
			ls_sel="\"$run:1-$run:max\""
		else
			ParseLSList
		fi

		buffer=""
		buffer_size="0"

		block_idx="0"

		for dataset in ${datasets[*]}
		do
			echo "* querying input for run $run, dataset $dataset"

			for file in `dasgoclient --limit=0 --query "file dataset=$dataset run=$run"`
			do
				buffer="$buffer $file"
				let buffer_size+=1
			
				if [ "$buffer_size" -ge "$files_per_block" ]
				then
					FlushBlock
				fi
			done
			
			if [ "$buffer_size" -gt "0" ]
			then
				FlushBlock
			fi
		done
	done
}
